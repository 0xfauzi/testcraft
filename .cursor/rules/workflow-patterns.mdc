---
description: Complete Task Master workflow standards including two-session methodology
alwaysApply: true
---
# Task Master Workflow Standards

## MANDATORY Two-Session Workflow

**CRITICAL**: All Task Master tasks and subtasks MUST use the two-session workflow. This is NON-NEGOTIABLE.

### Session 1 ‚Äî Planning & Handoff (no coding)
- **Pick up the task**: Identify task via `get_tasks` / `next_task`; confirm ID, title, tag context
- **Create branch immediately**: Use the naming scheme `feature/task-{task_id}-{brief-description}` and push upstream
- **Baseline assessment**: Run full test suite to understand the current state; capture results (pass/fail, failures summary)
- **Deep research**: Analyze architecture, relevant files, ports/adapters, tests; use Taskmaster research where beneficial
- **Produce a DETAILED plan**: Include objectives, scope, step-by-step implementation with file paths/functions, testing strategy, risks with mitigations, acceptance criteria, and rollout/backout considerations
- **Output a complete handoff**: Provide a copy/paste artifact to start Session 2 with everything needed

### Session 2 ‚Äî Implementation & Delivery
- **Start from handoff**: Validate branch and environment match the handoff
- **Execute the plan end-to-end**: Implement step-by-step, updating Taskmaster subtasks and logging progress
- **Verification**: Run test suite; fix failures; re-run until green
- **Quality gates**: Ensure linting/formatting and pre-commit hooks pass
- **Finalize**: Commit with descriptive message referencing the task; push branch; mark task/subtasks done per standards

## Session 1 ‚Äî Commands and Required Outputs

### Create and push branch
```bash
git checkout -b feature/task-{task_id}-{brief-description}
git push -u origin feature/task-{task_id}-{brief-description}
```

### Environment setup and baseline tests
```bash
# ‚úÖ MANDATORY: Set up environment before running tests
source .venv/bin/activate
uv sync --all-extras --all-groups

# ‚úÖ DO: Run test suite to ensure clean starting state
pytest tests/ -v
```

### Handoff package requirements
The handoff must include:
- **Task meta**: ID, title, tag, branch name
- **Current state**: Test results summary, notable failing tests, environment notes
- **Objectives**: Clear, measurable outcomes
- **Implementation plan**: Concrete steps with file paths, functions/classes, expected edits/diffs, config changes
- **Testing strategy**: Unit/integration/e2e updates and how to validate
- **Risks & mitigations**: Technical risks, fallbacks, and safeguards
- **Acceptance criteria**: What must be true to consider the task done
- **Runbook**: Ordered commands to execute during Session 2

## Session 2 ‚Äî Execution Requirements

### MANDATORY Environment Setup
ALWAYS start Session 2 with:
```bash
source .venv/bin/activate
uv sync --all-extras --all-groups
```

### Session 2 Runbook Template
```bash
# Run tests throughout implementation
pytest tests/ -v

# Pre-commit and finalize
pre-commit run -a
git add .
git commit -m "feat(task-{id}): {concise change}

- Implementation per plan
- Tests: {passing}
- Pre-commit: {passing}
"
git push origin feature/task-{id}-{brief-description}
```

## Task Master Integration Workflow

When working with Task Master tasks or subtasks, **STRICTLY FOLLOW** this workflow:

### 1. Implementation Planning üìã
- **Codebase Analysis**: Thoroughly scan the codebase to understand:
  - Existing abstractions, patterns, and architectural decisions related to the task or subtask
  - Similar implementations that can be referenced or extended
  - Relevant modules, classes, and functions already available
  - Current testing patterns and utilities
  - Configuration and setup mechanisms
  - Error handling and validation approaches

- **Implementation Strategy Development**:
  - Identify reusable components and avoid reinventing existing functionality
  - Map task requirements to existing codebase patterns
  - Determine integration points with current architecture
  - Plan for minimal code changes that maximize existing code reuse

### 2. Sub-Task Implementation üîÑ
For each task or sub-task:

```bash
# Update sub-task status
taskmaster set-status --id={subtask_id} --status=in-progress

# After completion with detailed progress logging
taskmaster update-subtask --id={subtask_id} --prompt="Implementation complete: [details]"
```

**Process**:
- Implement one sub-task at a time
- **Ask for review after each sub-task completion**
- Document implementation details and decisions
- Handle any issues or deviations from plan

### 3. Test Validation After Each Sub-Task üß™
```bash
# ‚úÖ MANDATORY: Environment setup before every test run
source .venv/bin/activate
uv sync --all-extras --all-groups

# ‚úÖ DO: Run test suite after each sub-task
pytest tests/ -v

# Run specific tests if applicable
pytest tests/test_specific_module.py -v
```
- **Requirement**: All tests must pass before proceeding
- **Action**: Fix any failing tests immediately
- **Documentation**: Update sub-task with test results
- **CRITICAL**: NEVER run tests without environment setup

### 4. Commit & Push Process üöÄ
**Only after approval and passing tests**:

```bash
# Stage changes
git add .

# Commit with descriptive message
git commit -m "feat(task-{task_id}): {subtask_description}

- Implementation details
- Test status: passing
- Related to task {task_id}"

# Push changes
git push origin feature/task-{task_id}-{brief-description}

# Mark sub-task as done
taskmaster set-status --id={subtask_id} --status=done
```

### 5. Task Completion üéØ
When all sub-tasks are complete:

```bash
# Mark main task as done
taskmaster set-status --id={task_id} --status=done

# Create pull request (if not already created)
gh pr create --title "feat: {task_description}" --body "Completes task {task_id}"
```

## Workflow Principles

### ‚ö†Ô∏è CRITICAL REQUIREMENTS
- **MANDATORY: Use two-session workflow** - Session 1 (planning) THEN Session 2 (implementation)
- **MANDATORY: Environment setup** - ALWAYS `source .venv/bin/activate && uv sync --all-extras --all-groups` before tests
- **Never skip the branch creation step**
- **Never implement without plan approval**
- **Never commit without passing tests**
- **Never mark task done without approval**
- **Always run tests after each sub-task**
- **Never run tests without environment activated**
- **Always follow the handoff package requirements**

### üîÑ Review Points
1. **Plan Review**: Before any implementation
2. **Sub-task Review**: After each sub-task completion
3. **Final Review**: Before marking task complete

### üìù Documentation Requirements
- Document implementation decisions in sub-task updates
- Include test results in commit messages
- Reference task IDs in all commits
- Update any affected documentation files
- Log all progress in Taskmaster subtask updates

### üêõ Error Handling
- If tests fail: Fix immediately, don't proceed
- If implementation differs from plan: Get approval for changes
- If blocked: Update task status and seek guidance
- If plan needs revision: Get re-approval before continuing

## Git Branch Naming Convention
```
feature/task-{task_id}-{brief-description}
bugfix/task-{task_id}-{brief-description}
refactor/task-{task_id}-{brief-description}
```

Examples:
- `feature/task-15-user-authentication`
- `bugfix/task-23-parsing-error`
- `refactor/task-8-llm-adapter-cleanup`

## ENFORCEMENT

**WORKFLOW VIOLATIONS ARE UNACCEPTABLE**

Any deviation from these standards is a critical error:
- Skipping two-session workflow
- Running tests without environment setup
- Implementing before plan approval
- Committing without passing tests
- Writing code in Session 1
- Skipping the handoff document
- Starting implementation without a complete plan

**If you violate these rules: STOP and restart properly.**

**THESE STANDARDS ARE NON-NEGOTIABLE.**
