---
globs: testcraft/domain/**/*.py
description: Domain modeling patterns and business logic standards
---

# Domain Modeling Standards

## Domain Layer Structure
The domain layer in [testcraft/domain/](mdc:testcraft/domain/) contains:
- **[models.py](mdc:testcraft/domain/models.py)**: Core domain entities and value objects
- Business logic that's independent of external concerns
- Domain-specific exceptions and errors

## Entity Design
```python
# ✅ DO: Rich domain entities with behavior
from dataclasses import dataclass
from typing import List, Optional
from pathlib import Path

@dataclass
class TestCase:
    name: str
    content: str
    file_path: Path
    framework: str = "pytest"
    
    def validate(self) -> None:
        """Domain validation logic."""
        if not self.name:
            raise ValueError("Test name cannot be empty")
        
        if not self.content.strip():
            raise ValueError("Test content cannot be empty")
    
    def to_file_content(self) -> str:
        """Convert to file format."""
        return f"def {self.name}():\n{self.content}"
```

## Value Objects
```python
# ✅ DO: Use value objects for domain concepts
@dataclass(frozen=True)
class FileContext:
    file_path: Path
    content: str
    language: str
    
    def __post_init__(self):
        if not self.file_path.exists():
            raise ValueError(f"File does not exist: {self.file_path}")
```

## Domain Services
```python
# ✅ DO: Domain services for complex business logic
class TestGenerationService:
    """Domain service for test generation business rules."""
    
    def determine_test_strategy(self, context: FileContext) -> str:
        """Business logic for choosing test approach."""
        if context.language == "python":
            if "class" in context.content:
                return "class_based"
            else:
                return "function_based"
        return "default"
```

## Domain Exceptions
```python
# ✅ DO: Specific domain exceptions
class TestCraftError(Exception):
    """Base exception for testcraft domain errors."""
    pass

class InvalidTestCaseError(TestCraftError):
    """Raised when a test case is invalid."""
    pass

class UnsupportedLanguageError(TestCraftError):
    """Raised when language is not supported."""
    pass
```

## Domain Rules
- Keep domain logic pure (no external dependencies)
- Use dependency inversion for external services
- Validate business rules within domain entities
- Express business concepts through rich models

## Repository Pattern
```python
# ✅ DO: Define repository interfaces in domain
from abc import ABC, abstractmethod

class TestCaseRepository(ABC):
    """Repository interface defined in domain layer."""
    
    @abstractmethod
    async def save(self, test_case: TestCase) -> None:
        pass
    
    @abstractmethod
    async def find_by_file(self, file_path: Path) -> List[TestCase]:
        pass
```

## Immutability
- Prefer immutable value objects where possible
- Use `@dataclass(frozen=True)` for value objects
- Make entities mutable only when necessary for business operations