# Task ID: 4
# Title: Define Interface Ports
# Status: done
# Dependencies: 2
# Priority: high
# Description: All 12 interface ports have been implemented using Python Protocols, providing clear contracts between the application layer and adapters. Each port is defined in its own file under testcraft/ports/, with comprehensive docstrings, precise type hints, and no adapter imports. The __init__.py file exports all port interfaces. These protocols are now ready for adapter implementations.
# Details:
1. 12 protocol interface files created in testcraft/ports/:
   - LLMPort: Large Language Model operations (test generation, analysis, refinement)
   - CoveragePort: Code coverage measurement and reporting
   - WriterPort: File writing operations (test files, reports)
   - ParserPort: Source code parsing and AST analysis
   - ContextPort: Context management (indexing, retrieval, summarization)
   - PromptPort: Prompt management (system/user prompts, schemas)
   - RefinePort: Test refinement operations
   - StatePort: Application state management
   - ReportPort: Report generation (analysis, coverage, summaries)
   - UIPort: User interface operations (progress, results, input)
   - CostPort: Cost tracking and usage monitoring
   - TelemetryPort: Observability and metrics collection
2. All protocols use Python's typing.Protocol for interface definitions
3. Comprehensive docstrings provided for each method
4. All parameters and return values have precise type hints
5. No imports from adapters in any port file
6. __init__.py updated to export all port interfaces
7. Consistent naming and structure across all protocols
8. Custom exception types used for error handling
9. Rich return types with detailed metadata
10. Support for configuration options via **kwargs
11. Integration with domain models (CoverageResult, RefineOutcome, AnalysisReport)
12. No linting errors detected

# Test Strategy:
Test implementations for each protocol verify interface compliance. mypy is used to ensure type checking works correctly with all protocols. Linting and static analysis confirm code quality and adherence to standards.

# Subtasks:
## 1. Verify protocol files and exports [done]
### Dependencies: None
### Description: Check that all 12 protocol files exist in testcraft/ports/ and that __init__.py exports each interface.
### Details:


## 2. Run mypy and linting on ports directory [done]
### Dependencies: None
### Description: Ensure all protocol files pass mypy type checking and linting with no errors.
### Details:


## 3. Create test implementations for each protocol [done]
### Dependencies: None
### Description: Write minimal test classes for each protocol to verify interface compliance and demonstrate usage.
### Details:


