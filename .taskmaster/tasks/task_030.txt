# Task ID: 30
# Title: Refactor oversized files to <=1000 lines, preserving architecture
# Status: pending
# Dependencies: None
# Priority: high
# Description: Split 11 large files into cohesive modules without behavioral change. Keep all public APIs stable, re-export from shims to avoid import churn, and enforce file-size limits going forward.
# Details:
Scope:
- Refactor each file >1000 lines into cohesive submodules
- Preserve clean architecture ports/adapters/use cases; no behavior change
- Maintain import paths via shims and __all__ re-exports
- Centralize shared helpers and AST-based logic
- Enforce TOML configs only; no YAML
- Post-refactor each file must be <1000 lines

Acceptance criteria:
- All existing tests pass; add/adjust tests for new module structure where needed
- No import path breakage; legacy imports continue to work
- Ruff + type checks pass
- CI size gate added to fail if any file exceeds 1000 lines
- Documentation/naming consistent with current conventions

# Test Strategy:
- Run full test suite before/after refactor; compare key outputs
- Verify public APIs unchanged via import smoke tests
- Add a lint rule or CI step to check file sizes
- Run Ruff (format+lint) and mypy/pyright if configured
- Manual spot checks for key adapters (evaluation, refine, openai)

# Subtasks:
## 1. Refactor prompts registry into modular package [pending]
### Dependencies: None
### Description: Split `testcraft/prompts/registry.py` by concern: sanitization, renderer, schemas, templates (system/user/eval). Keep `PromptRegistry` as facade; re-export and preserve all APIs. Consider moving large prompt bodies into assets and lazy-load with caching.
### Details:
Create: prompts/sanitization.py, prompts/renderer.py, prompts/schemas/v1.py, prompts/templates/v1/{system.py,user.py,evaluation.py}. Update registry.py to delegate. Add __all__ exports. Ensure deterministic rendering.

## 2. Split evaluation adapter into cohesive modules [pending]
### Dependencies: None
### Description: Extract acceptance, LLM judge, pairwise, parsers, artifacts, context, safety into `testcraft/adapters/evaluation/` submodules; keep `TestcraftEvaluationAdapter` as thin orchestrator.
### Details:
Files: acceptance.py, llm_judge.py, pairwise.py, parsers.py, artifacts.py, context.py, safety.py. Move helpers out of `main_adapter.py`; keep public class + signatures. Ensure `EvaluationPort` contract unchanged.

## 3. Modularize ContextAssembler into context/ package [pending]
### Dependencies: None
### Description: Move retrieval, neighbors, exemplars, contracts, deps/fixtures, coverage hints, error paths, usage examples, pytest settings, path constraints, AST utils, and assembly into dedicated modules under `services/context/`.
### Details:
Create: assembler.py (facade), retrieval.py, neighbors.py, exemplars.py, contracts.py, deps_fixtures.py, coverage_hints.py, error_paths.py, usage_examples.py, pytest_settings.py, path_constraints.py, ast_utils.py, assemble.py. Preserve budgets, return shapes, and existing services.

## 4. Refactor PytestRefiner into refinement/ package [pending]
### Dependencies: None
### Description: Extract runner, failure parsing, annotators, LLM pipeline, writer, leaving `PytestRefiner` as facade in `refiner.py`. Centralize constants to align with `RefineConfig`.
### Details:
Create: refinement/runner.py, failure_parsing.py, annotators.py, llm_pipeline.py, writer.py, refiner.py (facade). Preserve method signatures and return shapes. Ensure telemetry spans preserved.

## 5. Trim refine main adapter to orchestration; extract guardrails [pending]
### Dependencies: None
### Description: Make adapter a thin orchestrator. Extract guardrails/validation (AST equivalence, empty/None/identical checks), safe-apply, and manual suggestions into dedicated modules under services/refinement/. Keep `RefinePort` intact.
### Details:
Create: services/refinement/guardrails.py, apply.py, manual_suggestions.py. Adapter delegates to `PytestRefiner` and these helpers. Maintain telemetry and error mapping.

## 6. Make GenerateUseCase a thin orchestrator [pending]
### Dependencies: None
### Description: Extract pipeline helpers, writing, telemetry, state reporting, planning bridge from `generate_usecase.py` into submodules; keep public async API identical.
### Details:
Create under `application/generation/services/`: usecase_pipeline.py, writing.py, telemetry.py, state_reporting.py, planning_bridge.py. Keep spans and config handling unchanged.

## 7. Split CLI main into commands and bootstrap modules [pending]
### Dependencies: None
### Description: Keep `app` group in `testcraft/cli/main.py` but move generate command, context class, UI detection, and bootstrap into `cli/commands/*.py` and helpers. Preserve flags/help/exit codes.
### Details:
Create: cli/commands/generate.py, cli/context.py, cli/ui_detect.py, cli/bootstrap.py; wire registration in main.py. Retain `add_evaluation_commands` and `add_utility_commands` patterns.

## 8. Modularize config models into package with re-exports [pending]
### Dependencies: None
### Description: Move models from `testcraft/config/models.py` into `config/models/*.py` grouped by concern (discovery, patterns, refine, prompt_budget, environment, generation, telemetry, ui). Keep `config/models/__init__.py` re-exporting the same public names.
### Details:
Ensure defaults/validators unchanged; TOML-only configs retained. Add import shims if needed to avoid churn.

## 9. Restructure OpenAI adapter into submodules [pending]
### Dependencies: None
### Description: Split `adapters/llm/openai.py` into `openai/` package: client, logging_artifacts, token_policy, adapter facade. Preserve `LLMPort` behavior and constructor.
### Details:
Create: adapters/llm/openai/{client.py,logging_artifacts.py,token_policy.py,adapter.py}. Keep `.common` helpers. Ensure credential fallback stub remains for tests.

## 10. Split TestMapper into package with analysis/scoring/modules paths [pending]
### Dependencies: None
### Description: Break `adapters/parsing/test_mapper.py` into `test_mapper/` with analysis (dataclasses + AST walkers), mapper orchestrator, scoring, and module_paths (reuse ModulePathDeriver). Keep a shim that re-exports `TestMapper`.
### Details:
Create: adapters/parsing/test_mapper/{analysis.py,mapper.py,scoring.py,module_paths.py}. Ensure AST-first analysis; preserve thresholds and return shapes.

## 11. Restructure generation service tests into per-service modules [pending]
### Dependencies: None
### Description: Split `tests/test_generation_services.py` into individual test files per service under `tests/application/generation/services/`; keep one small integration test. Reuse shared fixtures via `conftest.py`.
### Details:
Create: tests/application/generation/services/{test_generation_config.py,test_batch_executor.py,test_content_builder.py,test_context_assembler.py,test_coverage_evaluator.py,test_plan_builder.py,test_pytest_refiner.py,test_generation_integration.py}. Move/adjust imports accordingly.

## 12. Add CI lint rule to enforce <1000 lines per file [pending]
### Dependencies: None
### Description: Introduce a CI step to fail builds if any repo file exceeds 1000 lines (excluding venv/build/caches).
### Details:
Implement a lightweight Python or bash script in `scripts/` to scan files and return nonzero on violations. Wire it into CI (existing test pipeline). Exclude virtualenv/coverage/build/output dirs and lockfiles.
