#!/bin/bash
# Backup pre-commit hook script that matches GitHub CI checks
# Use this if pre-commit framework is not available
#
# To install: cp scripts/git_hooks/pre-commit-backup .git/hooks/pre-commit && chmod +x .git/hooks/pre-commit

set -e

echo "🔍 Running pre-commit checks (matching GitHub CI)..."

# Get list of staged Python files
STAGED_PYTHON_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.py$' || true)

if [ -z "$STAGED_PYTHON_FILES" ]; then
    echo "📝 No Python files staged, skipping Python-specific checks"
    exit 0
fi

echo "📁 Checking $(echo "$STAGED_PYTHON_FILES" | wc -l) staged Python files..."

# 1. Ruff check (linting) - matches CI: uv run ruff check
echo "🔍 Running ruff check..."
if ! uv run ruff check $STAGED_PYTHON_FILES; then
    echo "❌ Ruff linting failed. Fix errors and try again."
    echo "💡 Run: uv run ruff check . --fix"
    exit 1
fi

# 2. Ruff format check - matches CI: uv run ruff format --check
echo "✨ Checking ruff formatting..."
if ! uv run ruff format --check $STAGED_PYTHON_FILES; then
    echo "❌ Code formatting check failed. Auto-fixing..."
    uv run ruff format $STAGED_PYTHON_FILES
    echo "✅ Code formatted automatically. Please review and re-commit."
    exit 1
fi

# 3. MyPy type checking - matches CI: uv run mypy testcraft/
TESTCRAFT_FILES=$(echo "$STAGED_PYTHON_FILES" | grep '^testcraft/' || true)
if [ ! -z "$TESTCRAFT_FILES" ]; then
    echo "🏷️ Running MyPy type check on testcraft/ files..."
    if ! uv run mypy $TESTCRAFT_FILES --show-error-codes --pretty; then
        echo "❌ Type checking failed. Fix type errors and try again."
        echo "💡 Run: uv run mypy testcraft/ --show-error-codes --pretty"
        exit 1
    fi
fi

# 4. Quick syntax validation
echo "📋 Validating Python syntax..."
for file in $STAGED_PYTHON_FILES; do
    if ! python -m py_compile "$file"; then
        echo "❌ Syntax error in $file"
        exit 1
    fi
done

# 5. Safety check (security) - matches CI: safety check
echo "🔒 Running security scan..."
if command -v safety >/dev/null 2>&1; then
    if ! uv run safety check --json --output safety-report.json; then
        echo "⚠️ Security vulnerabilities detected. Check safety-report.json"
        echo "💡 This is a warning, not blocking commit"
    fi
else
    echo "📝 Safety not installed, skipping security scan"
fi

echo "✅ All pre-commit checks passed! 🎉"
echo "📊 Your changes meet GitHub CI requirements"
